{
  "name": "Response",
  "author": {
    "name": "Vladislav Kurkin",
    "email": "b-vladi@cs-console.ru",
    "url": "https://github.com/B-Vladi"
  },
  "version": "0.1.0-rc1",
  "main": "Response.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/B-Vladi/Response"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "EventEmitter": "B-Vladi/EventEmitter.git#0.2.6"
  },
  "devDependencies": {
    "jasmine": "2.0.1",
    "jasmine-node": "^1.14.5",
    "karma": "^0.12.24",
    "karma-jasmine": "^0.2.3",
    "karma-browserify": "^2.0.0",
    "karma-chrome-launcher": "^0.1.5",
    "karma-phantomjs-launcher": "^0.1.4"
  },
  "bugs": {
    "url": "https://github.com/B-Vladi/Response/issues",
    "email": "b-vladi@cs-console.ru"
  },
  "scripts": {
    "test": "echo '>> Starting PhantomJS tests ======' && npm install && ./node_modules/karma/bin/karma start; echo '>> Starting node tests ======' && jasmine"
  },
  "readme": "Response [![Build Status](https://travis-ci.org/B-Vladi/Response.svg?branch=master)](https://travis-ci.org/B-Vladi/Response)\n========\nThe extensible event-driven stateful interface.\n\n * State(state)\n   * `.EVENT_CHANGE_STATE`\n   * `.STATE_ERROR`\n   * `.isState(object)`\n   * `.create`\n   * `.invoke(method, args, context)`\n\n   * `#isState`\n   * `#state`\n   * `#keys`\n   * `#data`\n   * `#stateData`\n   * `#invoke(method, args, context)`\n   * `#destroy(recursive)`\n   * `#is(state)`\n   * `#setState(state, data)`\n   * `#onState(state, listener, context)`\n   * `#onceState(state, listener, context)`\n   * `#onChangeState(listener, context)`\n   * `#offChangeState(listener)`\n   * `#setData(key, value)`\n   * `#getData(key)`\n   * `#getStateData(key)`\n   * `#toObject(keys)`\n   * `#toJSON()`\n\n * Response(parent)\n   * `.STATE_PENDING`\n   * `.STATE_RESOLVED`\n   * `.STATE_REJECTED`\n   * `.EVENT_PROGRESS`\n   * `.isResponse(object)`\n   * `.create(constructor, copyStatic)`\n   * `.resolve(results)`\n   * `.reject(reason)`\n   * `.invoke(method, args, context)`\n   * `.State(state)`\n   * `.Queue(stack, start)`\n\n   * `#State(state)`\n   * `#isResponse`\n   * `#pending()`\n   * `#resolve(results)`\n   * `#reject(reason)`\n   * `#progress(progress)`\n   * `#isPending()`\n   * `#isResolved()`\n   * `#isRejected()`\n   * `#then(onResolve, onReject, onProgress, context)`\n   * `#any(listener, context)`\n   * `#onPending(listener, context)`\n   * `#onResolve(listener, context)`\n   * `#notify(parent)`\n   * `#listen(response)`\n   * `#done()`\n   * `#map()`\n   * `#fork()`\n   * `#getResult(key)`\n   * `#getReason()`\n   \n * Queue(stack, start)\n   * `.EVENT_START`\n   * `.EVENT_STOP`\n   * `.EVENT_NEXT_ITEM`\n   * `.create(constructor, copyStatic)`\n   * `.invoke(method, args, context)`\n   * `.isQueue(object)`\n   * `.Response(parent)`\n\n   * `#isQueue`\n   * `#isStrict`\n   * `#isStarted`\n   * `#item`\n   * `#start()`\n   * `#stop()`\n   * `#push(item, key)`\n   * `#strict(flag)`\n   * `#onStart(listener, context)`\n   * `#onStop(listener, context)`\n   * `#onNextItem(listener, context)`\n",
  "readmeFilename": "README.md",
  "description": "Response [![Build Status](https://travis-ci.org/B-Vladi/Response.svg?branch=master)](https://travis-ci.org/B-Vladi/Response) ======== The extensible event-driven stateful interface.",
  "homepage": "https://github.com/B-Vladi/Response",
  "_id": "Response@0.1.0-rc1",
  "_shasum": "a00dec38bbb93b0a30b0bffa1e19356d74f38357",
  "_resolved": "git+https://github.com/B-Vladi/Response.git#efc7fd28bae0b4f994cf6a7155436a6419b8de7d",
  "_from": "Response@git+https://github.com/B-Vladi/Response.git#develop"
}
